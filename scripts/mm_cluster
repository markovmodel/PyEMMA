#!/usr/bin/env python
# encoding: utf-8
from emma2.coordinates.clustering.api import kmeans, regspace, kregspace
usage = """
================================================================================
clusters the simulation (MD) data to microstate generators. These generators are
structures or points in state space that shall subsequently be used 
to discretize the trajectories using a Voronoi (nearest-neighbor) partition.
================================================================================
\n\n
"""

import argparse
import sys

from emma2.util.files import handleInputFileArg
from emma2.util.log import getLogger
from emma2.util.pystallone import JavaException, API

log = getLogger()
# these are currently supported in emma2.coordinates.clustering
algorithms = ['kmeans', 'regspace', 'kregspace']
metrics = ['rmsd', 'euclidean']

def handleArgs():
    parser = argparse.ArgumentParser(usage=usage)
    parser.add_argument('-i', '--input', nargs='+', dest='input', help='input filename or filename pattern', required=True)
    parser.add_argument('-iformat', help='format of input files (deprecated)',
                         choices=[], default='auto')
    # TODO: this is eg. unsupported by current kmeans impl in stallone
    parser.add_argument('-istepwidth', type=int, default=1)
    parser.add_argument('-algorithm', choices=algorithms, required=True)
    parser.add_argument('-metric', choices=metrics, default='euclidian')
    parser.add_argument('-o', '--output', dest='output', default='centers.dat', help='')
    
    # algorithm dependent arguments
    parser.add_argument('-clustercenters', '-k', dest='k', type=int)
    parser.add_argument('-dmin', type=float)
    parser.add_argument('-spacing', type=int)
    parser.add_argument('-maxiterations', type=int, default=1000)
    parser.add_argument('-timecolumn', action="store_true", help='this is happily ignored at the moment.')
    
    args = parser.parse_args()

    # do some sanity checks on input
    if args.algorithm == 'kmeans' or args.algorithm == 'kcenter':
        if args.k is None:
            parser.error('kmeans and kcenter need parameter -clustercenters') 
            
    if args.algorithm == 'regularspatial' and args.dmin is None:
        parser.error('regularspatial needs parameter -dmin')
        
#     if args.algorithm == 'regulartemporal' and args.spacing is None:
#         parser.error('regulartemporal needs parameter -spacing')
    
    # check for input file pattern and create a proper list then
    args.input = handleInputFileArg(args.input)
    if args.input == []:
        log.error('empty input file list! eg. check your pattern and if the files exists.')
        sys.exit(-1)
        
    return args

def main():
    args = handleArgs()
    
    try:
        if args.algorithm == 'kmeans':
            clustering = kmeans(args.input, args.k, args.maxiterations)
        elif args.algorithm == 'regspace':
            clustering = regspace(args.input, args.dmin, args.metric)
        elif args.algorithm == 'kregspace':
            clustering = kregspace(args.input, args.k)
        
        centers = clustering.clustercenters()
        
        # save cluster centers to file
        writer = API.dataNew.writerASCII(args.output,' ', '\n')
        writer.addAll(centers)
    except JavaException as je:
        log.exception('Java exception occured! message: %s\n stacktrace:\n%s' 
                % (je.message(), je.stacktrace()))
        return 1
    except Exception:
        log.exception('something went wrong...')
        return 1
    log.info("successfully written cluster centers to file %s" % args.output)
    return 0

if __name__ == '__main__':
    sys.exit(main())
