#!/usr/bin/env python
# encoding: utf-8
"""
"""
import argparse
import sys

from emma2.coordinates.clustering.stalloneClustering import *
from emma2.util.files import handleInputFileArg
from emma2.util.log import getLogger

log = getLogger()

algorithms = ['kcenter', 'kmeans', 'regularspatial', 'regulartemporal']
input_formats = ['xtc', 'dcd' , 'ascii' , 'ensembleascii', 'auto']
metrics = ['rmsd', 'euclidian']

def handleArgs():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', nargs='+', dest='input', help='input filename or filename pattern', required=True)
    parser.add_argument('-iformat', help='format of input files',
                         choices=input_formats, default='auto')
    # TODO: this is eg. unsupported by current kmeans impl in stallone
    parser.add_argument('-istepwidth', type=int, default=1)
    parser.add_argument('-ialgorithm', dest='algorithm', type=str, choices=algorithms, required=True)
    parser.add_argument('-metric', dest='metric', type=str, choices=metrics, default='euclidian')
    parser.add_argument('-o', '--output', dest='output', default='centers.dat', help='')
    
    # algorithm dependent arguments
    parser.add_argument('-clustercenters', '-k', dest='k', type=int)
    parser.add_argument('-dmin', type=float)
    parser.add_argument('-spacing', type=int)
    parser.add_argument('-maxiterations', type=int, default=1000)
    
    args = parser.parse_args()

    # do some sanity checks on input
    if args.algorithm == 'kmeans' or args.algorithm == 'kcenter':
        if args.k is None:
            parser.error('kmeans and kcenter need parameter -clustercenters') 
            
    if args.algorithm == 'regularspatial' and args.dmin is None:
        parser.error('regularspatial needs parameter -dmin')
        
    if args.algorithm == 'regulartemporal' and args.spacing is None:
        parser.error('regulartemporal needs parameter -spacing')
    
    # check for input file pattern and create a proper list then
    args.input = handleInputFileArg(args.input)
    if args.input == []:
        log.error('empty input file list! eg. check your pattern and if the files exists.')
        sys.exit(-1)
        
    return args

def main():
    log.debug('parse args')
    args = handleArgs()
    log.debug('create loader')
    loader = getDataSequenceLoader(args.input)
    loader.scan()
    log.info('loading data...')
    # TODO: check if dimension of data is same
    # TODO: check if data fits into memory
   
    try:
        # this is online
        data = loader.loadAll()
        log.info('data loaded.')
        # cluster algo needs either IDataInput or IDataSequence
        
        algo = getClusterAlgorithm(data, loader.size(), **vars(args))
        algo.setInput(data)
        log.info('performing algo')
        algo.perform()
        log.info('algo finished')
        centers = algo.getClusterCenters()
        #cluster_inds = algo.getClusterIndexes()
        #log.info("cluster inds: " % cluster_inds.size())
        
        # save cluster centers to file
        writeASCIIResults(centers, args.output)
    except Exception:
        log.exception('something went wrong...')
        return 1
    log.info("successfully written cluster centers to file %s" % args.output)
    return 0

if __name__ == '__main__':
    sys.exit(main())