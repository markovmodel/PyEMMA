#!/usr/bin/env python
# encoding: utf-8

'''
updates the model 
The user needs to define different input options to be set below
'''

import argparse
import time
import os
import sys
from emma2.autobuilder import model_builder
import emma2.autobuilder.emma_crd_mockup as emma_crd 

# input options
# if Qcluster is selected, clustering and discretization update is always done
Qtransformer = True    # do you want to use a custom transformation?
Qcluster =  False    # do clustering of trajectories yes/no

def main():

    ##########################################################################
    # READ command line
    parser = argparse.ArgumentParser(description="Starts a model.")
    parser.add_argument('-server',  action='store_true', help='True: Keep running until no new results for waitingtime. False (default): Run once');
    parser.add_argument('-wtime', metavar='waiting-time', default=36000, type=int, help='Maximum waiting time in seconds. The server will be killed if no results have arrived in this time period');
    parser.add_argument('-wdir', metavar='working-directory', default="./", help='Working directory with results and model sub-directories');
    parser.add_argument('-trajname', metavar='trajectory-filename', default="protein.dcd", help='local filenames of the trajectory files');
    parser.add_argument('-lag', metavar='lagtime', default=1, type=int, help='MSM lag time');
    parser.add_argument('-useresults', metavar='selected results', nargs='+', default=None, help='list of selected results');
    parser.add_argument('--dir_model', metavar='model directory', default = "./model/", help='directory in which the model will be constructed')
    parser.add_argument('--dir_results', metavar='model directory', default = "./results/", help='directory in which the simulation results are found')
    parser.add_argument('--nostationary', default=False, action="store_true", help='if set, will suppress stationary');
    parser.add_argument('--nokinetics', default=False, action="store_true", help='if set, will suppress kinetics');
    parser.add_argument('-o', metavar='file', default=sys.stdout, help='Output file for this script');

    args = parser.parse_args()

    sleeptime = 10 # sleeping time in seconds whenever waiting
    out = args.o
    if (out != sys.stdout):
        out = file(args.o, 'w');
    proteintraj = args.trajname
    
    # output process ID
    pid = os.getpgid(0)
    out.write("PID = "+str(pid)+"\n");
    out.flush();
    
    # reads the custom script path and adds it to the system path
    #mypath = os.path.abspath(os.path.join(args.wdir, adaptive_settings.dir_scripts_model));
    #sys.path.append(mypath)
    # dynamically load system settings file
    #system_settings = __import__("system_settings")

    transformers = []

    # dynamically loads transformer if required
    #if (system_settings.custom_transformation == None):
    #    trans = None
    #else:
    #    mod1 = __import__(system_settings.custom_transformation)
    #    trans = mod1.MyTransformer(dir_system = os.path.abspath(adaptive_settings.dir_system_resources), dir_scripts = os.path.abspath(adaptive_settings.dir_scripts_model))
    #    transformer1 = emma_crd.create_custom_transform("Internal coordinate calculation", "model/crdlink", "model/icrd", trans, output_extension=".dat")
    #    transformers.append(transformer1)

    with open("par/distancegroup1.dat", "r") as infile:
        set1 = [map(int, line.split()) for line in infile]
    with open("par/distancegroup2.dat", "r") as infile:
        set2 = [map(int, line.split()) for line in infile]

    transformers.append(emma_crd.create_crd2dist_transform("model/crdlink", "model/icrd", set1, set2, output_extension=".icrd"))
    transformers.append(emma_crd.create_tica_transform("model/icrd", "model/tica", "model/tics", 10, 3, output_extension=".dat"))
    transformers.append(emma_crd.create_clustering_regspace("model/tics", "model/", "model/dtraj", 0.5))

    # dynamically loads clustering if required
    #if (system_settings.custom_clustering == None):
    #    clust = None
    #else:
    #    mod2 = __import__(system_settings.custom_clustering)
    #    clust = mod2.MyClustering()

    # dynamically loads discretization     
    #if (system_settings.custom_discretization == None):
    #    disc = None
    #else:
    #    mod3 = __import__(system_settings.custom_discretization)
    #    disc = mod3.MyDiscretization(out = out)

    # changes to working directory
    os.chdir(args.wdir)



    # starts the model    
    m = model_builder.ModelBuilder(transformers,
                     #trans,clust,disc,
                     proteintraj, lag=args.lag,
                     calculate_stationary = (not args.nostationary),
                     calculate_kinetics = (not args.nokinetics), 
                     dir_simulation_data = args.dir_results,
                     dir_model = args.dir_model,
                     out=out)
    numresults = m.update(selected_results = args.useresults)
    
    # starts server
    if args.server:
        timeStartedWaiting = time.time();
        while ((time.time() - timeStartedWaiting) < args.wtime):
            time.sleep(sleeptime)          
            numresults = m.update()  
            if numresults > 0:
                timeStartedWaiting = time.time();                
        now = time.ctime()            # get the time
        out.write('stopping model server ' + (now) + '\n')
        out.flush()

    return 0
        
if __name__ == "__main__":
    sys.exit(main())