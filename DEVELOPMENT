Proposal for development workflow
=================================

Basic Idea:
Use a development branch to work on and reintegrate this periodically into the
master branch.

Why:
* Have a tested, "stable" master branch, which is directly available by cloning.
* Interference with other devs is minimized until merging.


How:
A maintainer merges the development branch(es) periodically. These branches
should be pretested (e.g by automatic runs of the test-suite and tagging these
branches as "tested"/"stable" etc.). This can be achieved by a continous
integration (CI) software like Jenkins (http://jenkins-ci.org) or Travis-CI
(http://travis-ci.org), the first one is open source and the second one is free
for open source projects only.

Workflow for branching and merging:
A dev creates a feature branch "impl_fancy_feature" and pushes his work to this
branch. When he is done with his fancy feature (have written at least a working
test case for it), he pushes this work to his feature branch and merges it to
the development branch.

git branch impl_fancy_feature # create new branch
git checkout impl_fancy_feature # switch to new branch

... work, create/edit files, commit them to "impl_..." branch

TEST IT! :-)

# push your branch to the origin (remote repo) to backup it
git push origin impl_fancy_feature
# switch to devel branch 
git checkout development
# merge your fancy feature with devel branch
git merge impl_fancy_feature


Conclusions:
===========

* Working branches do not interfere with other ones.
* The development branch contains all tested implemented features
* The development branch is used to test for interference of features
* The master branch contains all tested features and is most stable
